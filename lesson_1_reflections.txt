#1
The diff between the two pieces of code was very helpful. While it did
not show me exactly what I was looking for immediately, it did show me
a few possible lines to choose from, from which I quickly found the
error.
#2
Having the entire history for a file could prove very useful. If you 
decide to delete a portion, or just want to look at how far you've come,
having a backup can be incredibly important. How did I solve this
problem? What did I do wrong, and how can I make sure I don't repeat that mistake? In the end, it will save time.
#3
Manual saves of commits are the most logical, and have the most meaning,
yet may give a forgetful programmer trouble. It is a little out of the 
way as well, and might cost you a little time, but, in the long run, it
will most likely save time when you try to find an error or backtrack on
a project.
#4
It's much more logical to save inter-related code files than documents
like on Google Docs, so it makes sense that the status of each file be
checked when making a commit. A pretty handy feature.
#5
git log shows which commits are in the current repository, and the
comments associated with them. git diff can be used to find both the
number and type of changes, and conveniently display them in bright
colors for easy location. (also use ctrl+ins and shift+ins instead of
ctrl+c and ctrl+v while in git bash)
#6
Using version control gives one the piece of mind to try whatever the
programmer pleases without worry of irrevocalbly breaking the project.
It should be quite liberating and stress-free coding from here on out!
